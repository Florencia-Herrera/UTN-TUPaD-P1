#1 Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Pedir n√∫mero al usuario
limite = int(input("Ingrese un n√∫mero entero positivo: "))

print("Factoriales del 1 al", limite)
for i in range(1, limite + 1):
    print(f"{i}! = {factorial(i)}")

# 2 Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Pedir posici√≥n final
posicion = int(input("Mostrar la serie de Fibonacci hasta la posici√≥n: "))

print("Serie de Fibonacci:")
for i in range(posicion + 1):
    print(f"F({i}) = {fibonacci(i)}")

# 3 Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Prueba general
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

print(f"{base}^{exponente} = {potencia(base, exponente)}")

# 4 Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitar n√∫mero decimal
numero = int(input("Ingrese un n√∫mero entero positivo para convertir a binario: "))

# Caso especial si el n√∫mero es 0
if numero == 0:
    print("0 en binario es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"{numero} en binario es: {binario}")

# 5 Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

# Ejemplo
print(es_palindromo("reconocer"))  # True
print(es_palindromo("python"))     # False

# 6 Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Ejemplos
print(suma_digitos(1234))  # 10
print(suma_digitos(9))     # 9
print(suma_digitos(305))   # 8

# 7 Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

# Ejemplos
print(contar_bloques(1))  # 1
print(contar_bloques(2))  # 3
print(contar_bloques(4))  # 10

# 8 Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas vecesaparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    elif numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

# Ejemplos
print(contar_digito(12233421, 2))  # 3
print(contar_digito(5555, 5))      # 4
print(contar_digito(123456, 7))    # 0
